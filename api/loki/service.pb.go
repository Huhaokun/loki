// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package loki

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type BaseResponse struct {
	ErrorCode            int32    `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseResponse) Reset()         { *m = BaseResponse{} }
func (m *BaseResponse) String() string { return proto.CompactTextString(m) }
func (*BaseResponse) ProtoMessage()    {}
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *BaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseResponse.Unmarshal(m, b)
}
func (m *BaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseResponse.Marshal(b, m, deterministic)
}
func (m *BaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseResponse.Merge(m, src)
}
func (m *BaseResponse) XXX_Size() int {
	return xxx_messageInfo_BaseResponse.Size(m)
}
func (m *BaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BaseResponse proto.InternalMessageInfo

func (m *BaseResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *BaseResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "loki.Empty")
	proto.RegisterType((*BaseResponse)(nil), "loki.BaseResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x8d, 0x58, 0xd7, 0x4e, 0x6b, 0x2d, 0xf1, 0xb2, 0x2c, 0x1e, 0x4a, 0x41, 0xa8, 0xa0,
	0x4b, 0xa9, 0x67, 0x0f, 0x75, 0xd1, 0x93, 0x14, 0x89, 0xbe, 0xc0, 0xba, 0x19, 0x64, 0xd9, 0x6c,
	0x27, 0x4c, 0x62, 0xa5, 0x6f, 0xe1, 0x23, 0xcb, 0x6e, 0xac, 0xb5, 0xd0, 0x83, 0xb7, 0xcc, 0xff,
	0x7f, 0xf9, 0x32, 0x10, 0x38, 0x75, 0xc8, 0xab, 0xb2, 0xc0, 0xd4, 0x32, 0x79, 0x92, 0x47, 0x86,
	0xaa, 0x32, 0xe9, 0xd5, 0xa4, 0xd1, 0x84, 0x68, 0x1c, 0x41, 0xe7, 0xa1, 0xb6, 0x7e, 0x3d, 0x7e,
	0x84, 0xfe, 0x7d, 0xee, 0x50, 0xa1, 0xb3, 0xb4, 0x74, 0x28, 0x2f, 0xa0, 0x8b, 0xcc, 0xc4, 0x19,
	0x69, 0x8c, 0xc5, 0x48, 0x4c, 0x3a, 0x6a, 0x1b, 0xc8, 0x18, 0xa2, 0x1a, 0x9d, 0xcb, 0xdf, 0x31,
	0x3e, 0x1c, 0x89, 0x49, 0x57, 0x6d, 0xc6, 0xd9, 0x97, 0x80, 0xc1, 0x82, 0x34, 0x66, 0xb4, 0xf4,
	0x4c, 0xc6, 0x20, 0xcb, 0x4b, 0x38, 0x79, 0x2a, 0x9d, 0x6f, 0x52, 0xd9, 0x4b, 0x9b, 0x1d, 0xd2,
	0xf6, 0xcd, 0x04, 0xc2, 0xd0, 0x14, 0x53, 0x21, 0xaf, 0x20, 0x9a, 0x6b, 0xdd, 0x52, 0x7f, 0x8a,
	0x44, 0x86, 0xf3, 0xce, 0x72, 0xd7, 0x00, 0x0a, 0x6b, 0x5a, 0xe1, 0x7f, 0xe8, 0x59, 0x06, 0x67,
	0x0a, 0x1d, 0x7d, 0x70, 0x81, 0xaf, 0x5c, 0x16, 0x15, 0xb2, 0x9c, 0x42, 0x67, 0x6e, 0xad, 0x59,
	0xcb, 0xf3, 0xc0, 0xef, 0xf4, 0x7b, 0x25, 0x77, 0xd0, 0x7f, 0xf1, 0xb9, 0xff, 0x35, 0xdc, 0x6c,
	0x0c, 0xc3, 0x00, 0x6f, 0xcb, 0xbd, 0xd7, 0x87, 0x30, 0x58, 0xa0, 0xff, 0x24, 0xae, 0x7e, 0x04,
	0xcf, 0x07, 0x6f, 0xc7, 0xed, 0x17, 0xdc, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x87, 0x91, 0xa3,
	0x2d, 0xa6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeControllerClient is the client API for NodeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeControllerClient interface {
	ListNode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeController_ListNodeClient, error)
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*BaseResponse, error)
	RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*BaseResponse, error)
}

type nodeControllerClient struct {
	cc *grpc.ClientConn
}

func NewNodeControllerClient(cc *grpc.ClientConn) NodeControllerClient {
	return &nodeControllerClient{cc}
}

func (c *nodeControllerClient) ListNode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeController_ListNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeController_serviceDesc.Streams[0], "/loki.NodeController/ListNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeControllerListNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeController_ListNodeClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodeControllerListNodeClient struct {
	grpc.ClientStream
}

func (x *nodeControllerListNodeClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeControllerClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/loki.NodeController/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControllerClient) RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/loki.NodeController/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeControllerServer is the server API for NodeController service.
type NodeControllerServer interface {
	ListNode(*Empty, NodeController_ListNodeServer) error
	AddNode(context.Context, *Node) (*BaseResponse, error)
	RemoveNode(context.Context, *Node) (*BaseResponse, error)
}

func RegisterNodeControllerServer(s *grpc.Server, srv NodeControllerServer) {
	s.RegisterService(&_NodeController_serviceDesc, srv)
}

func _NodeController_ListNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeControllerServer).ListNode(m, &nodeControllerListNodeServer{stream})
}

type NodeController_ListNodeServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodeControllerListNodeServer struct {
	grpc.ServerStream
}

func (x *nodeControllerListNodeServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeController_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loki.NodeController/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServer).AddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeController_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loki.NodeController/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServer).RemoveNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loki.NodeController",
	HandlerType: (*NodeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _NodeController_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _NodeController_RemoveNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNode",
			Handler:       _NodeController_ListNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

// ResourceTrickerClient is the client API for ResourceTricker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceTrickerClient interface {
	Apply(ctx context.Context, in *ResourceTrick, opts ...grpc.CallOption) (*BaseResponse, error)
}

type resourceTrickerClient struct {
	cc *grpc.ClientConn
}

func NewResourceTrickerClient(cc *grpc.ClientConn) ResourceTrickerClient {
	return &resourceTrickerClient{cc}
}

func (c *resourceTrickerClient) Apply(ctx context.Context, in *ResourceTrick, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/loki.ResourceTricker/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceTrickerServer is the server API for ResourceTricker service.
type ResourceTrickerServer interface {
	Apply(context.Context, *ResourceTrick) (*BaseResponse, error)
}

func RegisterResourceTrickerServer(s *grpc.Server, srv ResourceTrickerServer) {
	s.RegisterService(&_ResourceTricker_serviceDesc, srv)
}

func _ResourceTricker_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceTrick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTrickerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loki.ResourceTricker/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTrickerServer).Apply(ctx, req.(*ResourceTrick))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceTricker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loki.ResourceTricker",
	HandlerType: (*ResourceTrickerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _ResourceTricker_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// StateTrickerClient is the client API for StateTricker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateTrickerClient interface {
	Apply(ctx context.Context, in *StateTrick, opts ...grpc.CallOption) (*BaseResponse, error)
}

type stateTrickerClient struct {
	cc *grpc.ClientConn
}

func NewStateTrickerClient(cc *grpc.ClientConn) StateTrickerClient {
	return &stateTrickerClient{cc}
}

func (c *stateTrickerClient) Apply(ctx context.Context, in *StateTrick, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/loki.StateTricker/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateTrickerServer is the server API for StateTricker service.
type StateTrickerServer interface {
	Apply(context.Context, *StateTrick) (*BaseResponse, error)
}

func RegisterStateTrickerServer(s *grpc.Server, srv StateTrickerServer) {
	s.RegisterService(&_StateTricker_serviceDesc, srv)
}

func _StateTricker_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateTrick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateTrickerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loki.StateTricker/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateTrickerServer).Apply(ctx, req.(*StateTrick))
	}
	return interceptor(ctx, in, info, handler)
}

var _StateTricker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loki.StateTricker",
	HandlerType: (*StateTrickerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _StateTricker_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// NetworkTrickerClient is the client API for NetworkTricker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkTrickerClient interface {
}

type networkTrickerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkTrickerClient(cc *grpc.ClientConn) NetworkTrickerClient {
	return &networkTrickerClient{cc}
}

// NetworkTrickerServer is the server API for NetworkTricker service.
type NetworkTrickerServer interface {
}

func RegisterNetworkTrickerServer(s *grpc.Server, srv NetworkTrickerServer) {
	s.RegisterService(&_NetworkTricker_serviceDesc, srv)
}

var _NetworkTricker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loki.NetworkTricker",
	HandlerType: (*NetworkTrickerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "service.proto",
}
